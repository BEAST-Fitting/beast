# We set the language to c because python isn't supported on the MacOS X nodes
# on Travis. However, the language ends up being irrelevant anyway, since we
# install Python ourselves using conda.
language: c

os:
    - linux

# The apt packages below are needed for sphinx builds. A full list of packages
# that can be included can be found here:
#
# https://github.com/travis-ci/apt-package-whitelist/blob/master/ubuntu-precise

addons:
    apt:
        packages:
            - graphviz


stage: Comprehensive tests

stages:
   # Do the style check and a single test job, don't proceed if it fails
   - name: Initial tests
   # Test docs, astropy dev, and without optional dependencies
   - name: Comprehensive tests
   # These will only run when cron is opted in
   - name: Cron tests
     if: type = cron


env:
    global:
        # The following versions are the 'default' for tests, unless
        # overridden underneath. They are defined here in order to save having
        # to repeat them for all configurations.
        - PYTHON_VERSION=3.7
        - NUMPY_VERSION=stable
        - ASTROPY_VERSION=stable
        - MAIN_CMD='python setup.py'
        - SETUP_CMD='test'
        - EVENT_TYPE='pull_request push'


        # List runtime dependencies for the package that are available as conda
        # packages here.
        - CONDA_DEPENDENCIES='Cython scipy h5py matplotlib pytables hdf5 dust_extinction tqdm shapely'
        - CONDA_DEPENDENCIES_DOC='sphinx-astropy sip<4.19 Cython scipy h5py matplotlib pytables hdf5 dust_extinction tqdm shapely'

        # List other runtime dependencies for the package that are available as
        # pip packages here.
        - PIP_DEPENDENCIES='pytest-faulthandler pytest-mpl'

        # Conda packages for affiliated packages are hosted in channel
        # "astropy" while builds for astropy LTS with recent numpy versions
        # are in astropy-ci-extras. If your package uses either of these,
        # add the channels to CONDA_CHANNELS along with any other channels
        # you want to use.
        - CONDA_CHANNELS='astropy'

        # If there are matplotlib or other GUI tests, uncomment the following
        # line to use the X virtual framebuffer.
        # - SETUP_XVFB=True

        # If you want to ignore certain flake8 errors, you can list them
        # in FLAKE8_OPT, for example:
        - FLAKE8_OPT='--ignore=E501'

matrix:

    # Don't wait for allowed failures
    fast_finish: true

    include:
        # Make sure that egg_info works without dependencies
        - stage: Initial tests
          env: PYTHON_VERSION=3.7 SETUP_CMD='egg_info'

        # Try MacOS X
        - os: osx
          stage: Cron tests
          env: SETUP_CMD='test -a "--mpl" --remote-data'

        # Do a coverage test.
        - os: linux
          stage: Initial tests
          env: SETUP_CMD='test -a "--mpl" --remote-data --coverage'

        # Check for sphinx doc build warnings - we do this first because it
        # may run for a long time
        - os: linux
          env: SETUP_CMD='build_docs -w'
               CONDA_DEPENDENCIES=$CONDA_DEPENDENCIES_DOC

        # Now try Astropy dev with the latest Python and LTS with and 3.x.
        - os: linux
          env: ASTROPY_VERSION=development
               SETUP_CMD='test -a "--mpl" --remote-data'
               EVENT_TYPE='pull_request push cron'
        # - os: linux
        #  env: PYTHON_VERSION=3.6 ASTROPY_VERSION=lts NUMPY_VERSION=1.13

        # Add a job that runs from cron only and tests against astropy dev and
        # numpy dev to give a change for early discovery of issues and feedback
        # for both developer teams.
        - os: linux
          stage: Cron tests
          env: ASTROPY_VERSION=development NUMPY_VERSION=development
               SETUP_CMD='test -a "--mpl" --remote-data'
               EVENT_TYPE='cron'

        # Try all python versions and Numpy versions. Since we can assume that
        # the Numpy developers have taken care of testing Numpy with different
        # versions of Python, we can vary Python and Numpy versions at the same
        # time.

        - os: linux
          env: PYTHON_VERSION=3.5 NUMPY_VERSION=1.14
               SETUP_CMD='test -a "--mpl" --remote-data'
        - os: linux
          env: PYTHON_VERSION=3.6 NUMPY_VERSION=1.14
               SETUP_CMD='test -a "--mpl" --remote-data'
        - os: linux
          env: NUMPY_VERSION=1.15
               SETUP_CMD='test -a "--mpl" --remote-data'

        # Do a PEP8 test with flake8
        - os: linux
          stage: Initial tests
          env: MAIN_CMD='flake8 beast --count --show-source --statistics $FLAKE8_OPT' SETUP_CMD=''

    allow_failures:
        # allow to fail as this is a dev version
        - os: linux
          env: ASTROPY_VERSION=development
               SETUP_CMD='test -a "--mpl" --remote-data'
               EVENT_TYPE='pull_request push cron'

        - os: linux
          env: PYTHON_VERSION=3.5 NUMPY_VERSION=1.14
               SETUP_CMD='test -a "--mpl" --remote-data'

        # Do a PEP8 test with flake8
        # (do allow to fail unless your code completely compliant)
        - os: linux
          stage: Initial tests
          env: MAIN_CMD='flake8 beast --count --show-source --statistics $FLAKE8_OPT' SETUP_CMD=''

install:

    # We now use the ci-helpers package to set up our testing environment.
    # This is done by using Miniconda and then using conda and pip to install
    # dependencies. Which dependencies are installed using conda and pip is
    # determined by the CONDA_DEPENDENCIES and PIP_DEPENDENCIES variables,
    # which should be space-delimited lists of package names. See the README
    # in https://github.com/astropy/ci-helpers for information about the full
    # list of environment variables that can be used to customize your
    # environment. In some cases, ci-helpers may not offer enough flexibility
    # in how to install a package, in which case you can have additional
    # commands in the install: section below.

    - git clone --depth 1 git://github.com/astropy/ci-helpers.git
    - source ci-helpers/travis/setup_conda.sh

    # As described above, using ci-helpers, you should be able to set up an
    # environment with dependencies installed using conda and pip, but in some
    # cases this may not provide enough flexibility in how to install a
    # specific dependency (and it will not be able to install non-Python
    # dependencies). Therefore, you can also include commands below (as
    # well as at the start of the install section or in the before_install
    # section if they are needed before setting up conda) to install any
    # other dependencies.

script:
   - $MAIN_CMD $SETUP_CMD

after_success:
    # If coveralls.io is set up for this package, uncomment the line below.
    # The coveragerc file may be customized as needed for your package.
   - if [[ $SETUP_CMD == *coverage* ]]; then coveralls --rcfile='beast/tests/coveragerc'; fi
